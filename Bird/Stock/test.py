# -*- coding: utf-8 -*-

# 测试 线性回归 
import numpy as np
import matplotlib.pyplot as plt
 
# 训练
def standRegres(xArr,yArr):  
    m,n = np.shape(xArr)
    xMat = np.mat(np.ones((m, n+1))) # 加第一列设为1，为计算截距
    x = np.mat(xArr)
    xMat[:,1:n+1] = x[:,0:n];
    yMat = np.mat(yArr).T  
    xTx = xMat.T*xMat  
    if np.linalg.det(xTx) == 0.0:  
        print("This matrix is sigular, cannot do inverse") #行列式的值为0，无逆矩阵
        return  
    ws = xTx.I*(xMat.T*yMat)  
    return ws  
 
# 预测
def predict(xArr, ws):
    m,n = np.shape(xArr)
    xMat = np.mat(np.ones((m, n+1))) # 加第一列设为1, 为计算截距
    x = np.mat(xArr)
    xMat[:,1:n+1] = x[:,0:n]
    return xMat*ws
 
if __name__ == '__main__':
    x = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100],[101],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115],[116],[117],[118],[119],[120],[121],[122],[123],[124],[125],[126],[127],[128],[129],[130],[131],[132],[133],[134],[135],[136],[137],[138],[139],[140],[141],[142],[143],[144],[145],[146],[147],[148],[149],[150],[151],[152],[153],[154],[155],[156],[157],[158],[159],[160],[161],[162],[163],[164],[165],[166],[167],[168],[169],[170],[171],[172],[173],[174],[175],[176],[177],[178],[179],[180],[181],[182],[183],[184],[185],[186],[187],[188],[189],[190],[191],[192],[193],[194],[195],[196],[197],[198],[199],[200],[201],[202],[203],[204],[205]]
    y = [2064.39,2073.86,2023.09,2012.47,1983.24,2008.59,1995.85,2019.49,2045.09,2141.37,2150.41,2164.86,2176.99,2134.96,2126.66,2160.99,2133.62,2058.97,2084.22,2084.63,2020.86,2036.21,2058.80,2088.48,2111.42,2084.19,2086.35,1984.90,1850.80,1797.36,1852.36,1847.59,1893.89,1929.20,1931.83,1938.41,1881.38,1880.36,1857.87,1859.37,1889.73,1910.35,1912.90,1919.87,1926.61,1909.99,1859.67,1894.78,1922.55,1944.42,1939.31,1983.22,1917.22,1856.40,1833.43,1826.38,1792.29,1773.30,1751.85,1752.38,1717.25,1723.88,1733.25,1780.57,1783.78,1771.63,1756.90,1723.63,1686.94,1674.36,1686.45,1673.45,1679.35,1729.57,1715.64,1709.13,1665.00,1651.54,1652.90,1656.91,1662.27,1737.93,1721.37,1729.88,1724.43,1741.09,1733.55,1717.34,1692.20,1705.20,1726.20,1713.78,1691.08,1673.43,1671.95,1682.99,1673.46,1651.81,1654.96,1657.70,1693.26,1722.61,1708.56,1745.43,1707.99,1687.00,1712.84,1711.61,1747.47,1737.51,1722.21,1701.65,1684.71,1643.29,1638.29,1583.76,1584.08,1561.28,1575.34,1566.89,1527.74,1537.00,1532.92,1570.24,1597.64,1599.25,1560.51,1603.24,1601.27,1595.75,1581.16,1605.02,1611.44,1679.47,1684.50,1716.75,1690.27,1689.46,1663.09,1676.83,1671.68,1686.35,1610.45,1581.05,1585.60,1593.85,1594.10,1630.25,1626.62,1603.46,1604.18,1593.62,1571.25,1573.99,1575.99,1618.71,1638.16,1653.69,1669.03,1673.25,1674.61,1657.35,1663.31,1651.11,1644.49,1677.70,1665.79,1633.77,1647.04,1630.38,1616.55,1587.26,1611.96,1632.55,1616.78,1644.41,1680.50,1673.58,1718.81,1722.32,1760.63,1736.65,1773.85,1713.87,1679.44,1685.54,1633.25,1654.55,1652.98,1669.65,1671.08,1637.54,1695.11,1803.82,1769.62,1765.32,1757.58,1752.19,1723.84,1682.09,1662.00,1699.92,1739.70,1725.33,1723.15]
    ws = standRegres(x,y)
    print(ws)
    print(predict([[5]], ws))
 
    # 画图
    plt.scatter(x, y, s=20)
    yHat = predict(x, ws)
    plt.plot(x, yHat, linewidth=2.0, color='red') 
    plt.show()
